#!/bin/bash
TEST=0

printhelp() {
    printf "zinc - A custom filesyncer using rsync\n\n"
    printf "zinc [--server/--local] [--delete] [--update]\n\n"
    printf "Usage: \n\n"
    printf "    zinc (no args)\n        Copy new files between both, and update older files to newer ones.\n\n"
    printf "    zinc --server | -s\n        Make changes on server, and source them from local disk.\n\n"
    printf "    zinc --local | -l\n        Make changes on local disk, and source them from server.\n\n"
    printf "    zinc --delete | -d\n        Delete files at \$END if they differ from \$START.\n\n"
    printf "    zinc --update | -u\n        Do not --delete files at \$END if modification times postdate \$START.\n\n"
}

rsyncmessage() {
    PLACE=$1
    NEW='s/f\+\+\+\+\+\+\+\+\+ /NEW /g'
    UPD="s/f.(s.|.t)(\.)*/UPD /g"
    DEL='s/^\*deleting\ /DEL /g'
    if [ $PLACE == 1 ]; then
        LOC="s/^>?/SYSTEM /g"
    else
        LOC="s/^<?/SERVER /g"
    fi
    DIR='s/^c.*\ /DIR /g'
    GARBAGE='/^\.d|^sen|^rec|^tot|^$/d'
    sed -E "$DEL; $NEW; $UPD; $DIR; $GARBAGE; $LOC"
}

colorize(){
    SYS='s/^SYSTEM/\\e[38;5;47mSYSTEM\\e[0m/g'
    SER='s/^SERVER/\\e[38;5;226mSERVER\\e[0m/g'
    DEL='s/DEL/\\e[38;5;1mDEL\\e[0m/g'
    NEW='s/NEW/\\e[38;5;202mNEW\\e[0m/g'
    UPD='s/UPD/\\e[38;5;239mUPD\\e[0m/g'
    DIR='s/DIR/\\e[38;5;129mDIR\\e[0m/g'
    while read in; do
        echo -e "$(echo $in | sed "$DEL; $SYS; $SER; $NEW; $UPD; $DIR")";
    done
}

LOCAL="$HOME/Study"
HEART=$(cat $HOME/.private/server)
SERVER="$HEART:~/Study"
if [ $TEST == 1 ]; then
    SERVER="$HOME/Teddy"
fi
VSYNC="rsync --exclude-from=$HOME/.config/zinc/zinc.exclude --modify-window=1 --human-readable --recursive --times --links --perms --itemize-changes"
NOTDONE=true
ARRAY=($LOCAL $SERVER)
DIRECTION=0 # Direction 0 is LOCAL to SERVER, and 1 is SERVER to LOCAL
BOTH=true # Update from both sides
SYNC="$VSYNC"
QUESTION=(remove add)
CMDLINE=$#

while [ "$1" != "" ]; do
    BOTH=false
    case $1 in
        -s | --server )
            DIRECTION=0
            ;;
        -l | --local )
            DIRECTION=1
            ;;
        -d | --delete )
            SYNC="$SYNC --delete"
            ;;
        -u | --update )
            SYNC="$SYNC --update"
            ;;
        -h | --help )
            printhelp
            exit
            ;;
    esac
    shift
done

while $NOTDONE; do
    if $BOTH; then
        $VSYNC $LOCAL/ $SERVER --update --dry-run | $HOME/dotfiles/bin/messageParser 0
        $VSYNC $SERVER/ $LOCAL --update --dry-run | $HOME/dotfiles/bin/messageParser 1
        # $VSYNC $LOCAL/ $SERVER --update --dry-run | rsyncmessage 0 | colorize
        # $VSYNC $SERVER/ $LOCAL --update --dry-run | rsyncmessage 1 | colorize
        read -p "Would you like to apply these changes [y/N]? Q to quit: " option
        case $option in
            [Yy]*)
                echo "Applying above-mentioned changes."
                $VSYNC $LOCAL/ $SERVER --update --verbose
                $VSYNC $SERVER/ $LOCAL --update --verbose
                NOTDONE=false
                ;;
            [Qq]*)
                exit
                ;;
            *)
                BOTH=false
                ;;
        esac
    else
        if [ $CMDLINE = 0 ]; then
        for arg in delete update; do
            check="$(echo "$SYNC" | grep "$arg")"
            exists=$?
            read -p "Would you like to ${QUESTION[$exists]} the --$arg option[y/N]" option
            case $option in
                [Yy]*)
                    if [ $exists == 0 ]; then
                        SYNC=$(echo "$SYNC" | sed "s/ --$arg//g")
                    else
                        SYNC="$SYNC --$arg"
                    fi
                    ;;
                *)
                    ;;
            esac
        done
        read -p "To go back to dual-way transfers type [Bb], to swap the focus of deletion [Ff], to quit [Qq]." option
        case $option in
            [Bb]*)
                echo "Going back to dual-way transfers."
                BOTH=true
                ;;
            [Ff]*)
                echo "Swapping the focus of deletion."
                DIRECTION=$(expr 1 - $DIRECTION)
                ;;
            [Qq]*)
                exit
                ;;
            *)
                ;;
        esac
        fi
        START=${ARRAY[$DIRECTION]}
        END=${ARRAY[1 - $DIRECTION]}
        echo "Changes are happening on $END and they are sourced from $START."
        $SYNC $START/ $END --dry-run | rsyncmessage $DIRECTION | colorize
        read -p "Would you like to apply these changes [y/N]? Q to quit: " option
        case $option in
            [Yy]*)
                echo "Applying above-mentioned changes."
                $SYNC $START/ $END
                NOTDONE=false
                ;;
            [Qq]*)
                exit
                ;;
            *)
                ;;
        esac
        CMDLINE=0
    fi
done

