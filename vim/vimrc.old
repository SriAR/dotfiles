set nocompatible

let g:bundle_path = '~/.vim/bundle'

call plug#begin(bundle_path)
Plug 'lervag/vimtex'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'tpope/vim-fugitive'
Plug 'itchyny/lightline.vim'
Plug 'sirver/ultisnips'
Plug 'altercation/vim-colors-solarized'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-surround'
Plug 'spinks/vim-leader-guide'
Plug 'scrooloose/nerdcommenter'
Plug 'godlygeek/tabular'
Plug 'Konfekt/FastFold'
Plug 'dylanaraps/wal.vim'
Plug 'tmhedberg/SimpylFold'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-neorg/neorg' | Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-orgmode/orgmode'
call plug#end()

" Enable plugins based on filetype
filetype indent on
filetype plugin on

" Enable syntax highlighting
syntax enable

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Fold code to make it easier to read
set foldmethod=marker
set foldmarker={{{,}}}

" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" Autoread when file is changed from outside
set autoread

" Setting encoding and spellcheck language
set encoding=utf-8
set spelllang=en_us

" Better commandline completion
set wildmenu
set wildignore=*.o,*~,*.pyc,*.aux,*.bbl,*.blg,*.fdb_latexmk,*.fls,*.log,*.pdf,*.gz

" Show line and column number of cursor
set ruler

" Show the current line number while showing other line numbers relatively
set number
set relativenumber

" Show the statusline below -> Fix for lightline
set laststatus=2
set noshowmode

"Open new window splits logically
set splitbelow
set splitright

" Change directory to wherever the file is open
set autochdir

" Search settings
set nohlsearch
set incsearch

" Something something
set wrap
set linebreak

" Confirm if quitting without saving
set confirm

" Don't redraw when executing macros
set lazyredraw

" Show matching brackets and blink for two tenths of a second
set showmatch
set mat=2

" Solarized colorscheme
" set background=dark
" colorscheme solarized
colorscheme wal

" Set an undo file for persisting through reboots
try
    set undodir=~/.cache/vim/undo
    set undofile
catch
endtry

" Do not hide mouse when typing
set nomousehide

set updatetime=300
set hidden               " Hide buffers when they are abandoned
set cmdheight=2          " Setting command height 2 for more space
set shortmess+=c         " Messages should be short

let mapleader = ","
let maplocalleader = "\\"

" Keep same indent on next line, and indent after {
set autoindent
set smartindent

" Visual wrapped text preserves indent
set breakindent

" Use spaces instead of tabs
set expandtab

" Set shifts to 4 spaces
set shiftwidth=4
set tabstop=4

" Makes all tabs 'look' like 4 spaces, but why this+expandtab?
set softtabstop=4

" vim-leader-guide
let g:lmap = {}
call leaderGuide#register_prefix_descriptions(",", "g:lmap")

" Editing the vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
let g:lmap.e = {'name': 'Edit Vimrc'}

" Better movement between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Move to next visual line rather than next actual line
vnoremap j gj
vnoremap k gk
nnoremap j gj
nnoremap k gk

" Copy pasting from system clipboard. Needs +clipboard (gvim/nvim)
vnoremap <C-c> "+y
nnoremap <C-v> "+p

" :W sudo saves the file
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

" Enter visual block mode. The usual command is overriden by paste
command! Vb normal! <C-v>

" Add empty lines above and below
nnoremap <silent><C-j> :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent><C-k> :set paste<CR>m`O<Esc>``:set nopaste<CR>

" Writing/Quitting macros
inoremap <leader>wq <Esc>:wq<CR>
nnoremap <leader>wq :wq<CR>
inoremap <leader><leader> <Esc>m`:w<CR>``a
nnoremap <leader><leader> :w<CR>
nnoremap <leader>q :q<CR>

" Delete trailing whitespace before saving
autocmd BufWritePre * %s/\s\+$//e

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"========"
" vimtex "
"========"
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmg'
set conceallevel=1
if has("nvim")
    let g:vimtex_compiler_progname = '/home/cs/.local/bin/nvr'
endif

"==========="
" UltiSnips "
"==========="
let g:UltiSnipsExpandTrigger = '<c-b>'
let g:UltiSnipsJumpForwardTrigger = '<c-b>'
let g:UltiSnipsJumpBackwardTrigger = '<c-z>'
let g:UltiSnipsSnippetsDir="/home/cs/.vim/ultisnips"
let g:UltiSnipsSnippetDirectories=["/home/cs/.vim/ultisnips", "UltiSnips"]

"=================="
" Limelight + Goyo "
"=================="
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" NEW STUFF - HERE BE DRAGONS

" Pressing ,ss will toggle and untoggle spell checking
noremap <leader>ss :setlocal spell!<cr> :echo &spell<cr>

" Shortcuts using <leader>
noremap <leader>sn ]s
noremap <leader>sp [s
noremap <leader>sa zg
noremap <leader>s? z=

" Prepending/Appending in Insert mode
inoremap <C-l> <C-o>A
inoremap <C-h> <C-o>I

"Linewise scrolling in Insert mode
inoremap <C-e> <C-o><C-e>
inoremap <C-y> <C-o><C-y>

" COC {{{
    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif
	" extensions
	let g:coc_global_extensions = [
		\'coc-emoji',
		\'coc-dictionary',
		\'coc-tag',
		\'coc-snippets',
		\'coc-json',
		\'coc-html',
		\'coc-css',
		\'coc-python',
		\'coc-vimtex',
		\'coc-diagnostic'
		\]

	" snippet mappings
	map <c-l> <c-o>:CocList snippets<CR>
	vmap <c-j> <Plug>(coc-snippets-select)
	let g:coc_snippet_next = '<tab>'
	let g:coc_snippet_prev = '<s-tab>'
	xmap <leader>ex <Plug>(coc-convert-snippet)

	" binding <tab> to select
	" helper function to check if previous entry is a whitespace.
	function! s:check_back_space() abort
		let col = col('.') - 1
		return !col || getline('.')[col - 1] =~ '\s'
	endfunction

	" Use tab to navigate manu and snippets
	imap <silent><expr> <tab>
		\ coc#expandableOrJumpable() ? "\<c-r>=coc#_insert_key('request', 'snippets-expand-jump', 1)<cr>" :
		\ pumvisible() ? "\<c-n>":
		\ <SID>check_back_space() ? "\<tab>" :
		\ coc#refresh()

	inoremap <silent><expr> <s-tab> pumvisible() ? "\<c-p>" : "\<c-h>"
	inoremap <silent><expr> <c-space> coc#refresh()
	inoremap <expr> <cr> pumvisible() ? coc#_select_confirm() : "\<c-g>u\<cr>"

	nmap <silent> [g <Plug>(coc-diagnostic-prev)
	nmap <silent> ]g <Plug>(coc-diagnostic-next)

	" Use K to show documentation in preview window.
	function! s:show_documentation()
		if (index(['vim','help'], &filetype) >= 0)
			execute 'h '.expand('<cword>')
		else
			call CocAction('doHover')
		endif
	endfunction

	nnoremap <silent> K :call <SID>show_documentation()<cr>
	nnoremap <Plug>(coc-show-documentation) :call <SID>show_documentation()<cr>
	nmap <silent> <leader>dk <Plug>(coc-show-documentation)

	" GoTo code navigation.
	nmap <silent> <leader>dd <Plug>(coc-definition)
	nmap <silent> <leader>dy <Plug>(coc-type-definition)
	nmap <silent> <leader>di <Plug>(coc-implementation)
	nmap <silent> <leader>dr <Plug>(coc-references)
"														}}}

" NERDCommenter {{{
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1
" }}}

" Rainbow parenthesis {{{

" " Activate
" :RainbowParentheses
"
" " Deactivate
" :RainbowParentheses!
"
" " Toggle
" :RainbowParentheses!!
"
" " See the enabled colors
" :RainbowParenthesesColors

" Activation based on file type
augroup rainbow_lisp
  autocmd!
  autocmd FileType lisp,clojure,scheme RainbowParentheses
augroup END

let g:rainbow#max_level = 16
let g:rainbow#pairs = [['(', ')'], ['[', ']']]

" List of colors that you do not want. ANSI code or #RRGGBB
let g:rainbow#blacklist = [233, 234]

" }}}
